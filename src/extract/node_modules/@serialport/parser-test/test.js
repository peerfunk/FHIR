'use strict'
const Transform = require('stream').Transform

/**
 * A transform stream that uses a regular expression to split the incoming text upon.
 *
 * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 * @extends Transform
 * @example
const SerialPort = require('serialport')
const Regex = require('@serialport/parser-regex')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Regex({ regex: /[\r\n]+/ }))
parser.on('data', console.log)
 */
class TestParser  extends Transform {
  constructor (device, callback,options) {
	
    const opts = Object.assign({
      encoding: 'ascii'
    }, options)
	if (opts.rmain === undefined) {
      throw new TypeError('"options.regex" must be a regular expression pattern or object')
    }

    if (!(opts.rmain instanceof RegExp)) {
      opts.rmain = new RegExp(opts.rmain)
    }
    super(opts)
	this.callback = callback;
    this.rmain = opts.rmain;
	this.x = "";
    this.device = device;
	this.data = ''
	console.log("Parser initialized!");
  }

  _transform (chunk, encoding, cb) {
	this.x = this.x + chunk;
	
	if(this.rmain.test(this.x)){
		this.push(this.x.split(this.rmain)[1])
		this.callback(this.x.split(this.rmain)[1], this.device);
		this.x = '';
	}
	if(chunk == '\r'){
		console.log("newline")
	}
		cb()
    }
  _flush (cb) {
    this.push(this.data)
    this.data = ''
    cb()
  }
}

module.exports = TestParser
